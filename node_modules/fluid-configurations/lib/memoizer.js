/**
 * Returns a memoized function with a custom hasher function
 *
 * This simplifies the creation of memoized methods that receive
 * an options argument as the first parameter. It allow
 * allow us to debug how many times a method has been memoized
 * and what has was being used.
 */
var _ = require("lodash"),
  memoize = require("async").memoize,
  debug = require("debug")("fluid:configurations:memoizer"),
  memoized_log = {},
  logMemoization = process.env.DEBUG_MEMOIZATION ||
    (process.env.DEBUG && process.env.DEBUG.match(/^fluid/));

module.exports = function (fn, select, type) {

  if (process.env.FLUID_SKIP_S3_LIST_MEMOIZATION) {
    return fn;
  }

  type = type || fn.name || "anonymous";
  return memoize(fn, function (options) {


    var hash = type + ":" + JSON.stringify(_.pick(options, select));

    if (logMemoization) {
      memoized_log[hash] = memoized_log[hash] || 0;
      memoized_log[hash] += 1;

      if (memoized_log[hash] > 1) {
        debug("[info] Sending memoized response for %s (%d hits)", hash, memoized_log[hash]);
      }
      // console.log("(%d hits) Hash %s, \noptions %j, \nselect %j", memoized_log[hash], hash, options, select);
    }


    return hash;
  });
};
