/**
 * Gets a list of cas (configurable attributes) and generates
 * edges between the product and cas and between attributes and sub attributes
 */
var _ = require("lodash");

module.exports = function (options) {
  var graph = options.graph,
    vertices = [],
    edges = [],
    config = options.config,
    relationshipTypes = [
      "values",
      "facets",
      "associatedView",
      "locationOverrides",
      "subAttributes",
      "sympatheticFacets",
      "sympatheticRelations",
      "visibilityRules"
    ],
    getIdAsInt = options.utils.getIdAsInt,
    addFutureRelationships = options.utils.addFutureRelationships;


  /**
   * Adds a ca vertex
   */
  function addAttributeVertex(ca, id, parentId) {
    id = getIdAsInt(id);

    var vertex = _.defaults({
      id: id,
      ns: "ca"
    }, _.omit(ca, relationshipTypes));

    if (parentId) {
      vertex.parentId = parentId;
    }

    // Includes relationships that can't be resolved yet into
    // options.graph.relationships[ca:123][type] = values;
    addFutureRelationships({
      relationshipTypes: relationshipTypes,
      configEntry: ca,
      vertexKey: "ca:" + id,
      graph: graph
    });

    vertices.push(vertex);

    return vertex;
  }

  /**
   * Adds subattributes recursively and links them with their parent ca
   */
  function addSubAttributes(subAttributes, parentAttribute) {
    _.each(subAttributes, function (ca, id) {
      var subVertex = addAttributeVertex(ca, id, parentAttribute.id);
      // ca > ca edges
      edges.push({
        from: "ca:" + parentAttribute.id,
        to: "ca:" + subVertex.id,
        type: "hasAttribute"
      });
      if (ca.subAttributes) {
        addSubAttributes(ca.subAttributes, subVertex);
      }
    });
  }

  // Adds vertices for cas
  _.each(config.attributes || {}, function (ca, id) {
    var caVertex = addAttributeVertex(ca, id);
    // Adds p > ca edges
    // Adds vertices for top level cas
    edges.push({
      from: "p:" + graph.vertices[0].id,
      to: "ca:" + caVertex.id,
      type: "hasAttribute"
    });


    // Now that we've assigned top level cas we can add subAttributes
    if (ca.subAttributes) {
      addSubAttributes(ca.subAttributes, caVertex);
    }

  });

  // We need to pass the new graph in order to compose
  // this function with other steps.
  graph.edges = graph.edges.concat(edges);
  graph.vertices = graph.vertices.concat(vertices);

  options.graph = graph;
  return options;
};
