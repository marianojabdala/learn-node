/**
 * Links cas and avs
 */

var _ = require("lodash");

function addVerticesAndEdgesForSympatheticFacets(options, ca, caIdString) {
  var getIdAsInt = options.utils.getIdAsInt,
    ownerCaId = "ca:" + getIdAsInt(caIdString);

  _.each(ca.sympatheticFacets, function (info) {
    var sympatheticFacetVertex = {
      id: _.uniqueId(),
      ns: "sf",
      relationship: info.mastersRelation
    },

    sfId = "sf:" + sympatheticFacetVertex.id;

    options.graph.vertices.push(sympatheticFacetVertex);
    options.graph.edges.push({
      from: ownerCaId,
      to: sfId,
      type: "isSympatheticWith"
    });

    _.each(info.masters, function (master) {
      var masterVertex = {
          id: _.uniqueId(),
          ns: "sfm"
        },
        id = "sfm:" + masterVertex.id;
      options.graph.vertices.push(masterVertex);
      options.graph.edges.push({
        from: id,
        to: master.facet.replace("f", "f:"),
        type: "isMaster"
      });
      options.graph.edges.push({
        from: id,
        to: master.facetValue.replace("fv", "fv:"),
        type: "isMaster"
      });
      options.graph.edges.push({
        from: id,
        to: sfId,
        type: "hasSympatheticRule"
      });
    });

    _.each(info.slaves, function (slave) {
      var slaveVertex = {
          id: _.uniqueId(),
          ns: "sfs"
        },
        id = "sfs:" + slaveVertex.id;

      options.graph.vertices.push(slaveVertex);

      options.graph.edges.push({
        from: id,
        to: "ca:" + getIdAsInt(slave.productAttribute),
        type: "isSlave"
      });

      options.graph.edges.push({
        from: id,
        to: sfId,
        type: "hasSympatheticRule"
      });

      options.graph.edges.push({
        from: id,
        to: slave.facet.replace("f", "f:"),
        type: "isSlave"
      });
      options.graph.edges.push({
        from: id,
        to: slave.facetValue.replace("fv", "fv:"),
        type: "isSlave"
      });
    });


  });
}



function extractSympatheticFacets(options) {
  function processCa(ca, id) {
    if (ca.sympatheticFacets) {
      addVerticesAndEdgesForSympatheticFacets(options, ca, id);
    }
    // Handle subAttributes
    if (ca.subAttributes) {
      _.each(ca.subAttributes, function (ca, caId) {
        processCa(ca, caId);
      });
    }
  }
  _.each(options.config.attributes, function (ca, caId) {
    processCa(ca, caId);
  });
}

module.exports = function (options) {
  extractSympatheticFacets(options);
  return options;
};
