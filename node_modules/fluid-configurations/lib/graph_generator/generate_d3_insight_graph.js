/**
 * In order to simplify debugging and understanding graph
 * configurations we will generate a simplified graph that
 * will be rendered via d3 using the https://github.com/ignacioola/insights
 * module.
 *
 * These graphs will also be published when syncing configurations and can
 * be visualized under
 *
 *    http://fluid-configurations.s3.amazonaws.com/visualization/graph.html?graph=GRAPH_URL
 *
 * For example:
 *
 * http://fluid-configurations.s3.amazonaws.com/visualization/graph.html?graph=http://fluid-configurations.s3.amazonaws.com/dry-run/2.2.0/prod/prod/636/product/20378/graph-en_us.json
 *
 */

var _ = require("lodash");

module.exports = function (graph) {

  var d3Graph = { links: [], nodes: [] },
    clusterCount = {},
    vertexNs = [];



  // Generates an edges list from groups
  graph.edges = [];
  _.each(graph.edgeGroups, function (edges) {
    var i, edge, from, to;
    for (i = 0; edges.length > i; i += 1) {
      edge = edges[i];
      from = graph.vertices[edge[0]];
      to = graph.vertices[edge[1]];
      try {
        graph.edges.push([from.ns + ":" + from.id, to.ns + ":" + to.id]);
      } catch (e) {
        console.log("Failed pushing edge %j from %j to %j", edge, from, to);
        throw e;
      }
    }
  });


  _.each(graph.vertices, function (vertex) {
    var id = vertex.ns + ":" + vertex.id,
      size = _.filter(graph.edges, function (edge) {
        return edge[0] === id || edge[1] === id;
      }).length;

    clusterCount[vertex.ns] = clusterCount[vertex.ns] || 0;
    clusterCount[vertex.ns] += 1;
    vertexNs = _.keys(clusterCount);
    d3Graph.nodes.push({
      id: id,
      text: vertex.name || vertex.vendorId || vertex.alias || (vertex.ns + ":" + vertex.id),
      cluster: vertex.ns,
      size: size > 2 ? size : 2,
      color: vertex.color,
      x:  (_.indexOf(vertexNs, vertex.ns) + 1) * 10,
      y: clusterCount[vertex.ns] * 10
    });
  });


  // d3Graph.links = graph.edges;
  _.each(graph.edges, function (edge) {
    d3Graph.links.push(edge);
    // d3Graph.links.push([edge.from, edge.to]);
    // d3Graph.links.push({source: edge.from, target: edge.to});
  });

  return d3Graph;

};
