
var _ = require("lodash"),
  getPriceVertex = require("./add_pricing").getPriceVertex;

function linkVuViews(vuId, vu, options) {

  options.graph.edges.push({
    from: "vu:" + vuId,
    to: "view:" + vu.associatedView.viewId,
    type: "displaysView"
  });


  // This is likely to be repeated, but the optimize_graph step
  // will get rid of duplicated entries
  options.graph.vertices.push({
    id: vu.associatedView.viewId,
    ns: "view",
    name: vu.associatedView.viewId,
  });
}

function addValueUsageVertices(options) {
  var config = options.config,
    getIdAsInt = options.utils.getIdAsInt,
    vuCounter = 1;

  _.each(config.values || {}, function (av, avStringId) {
    var avId = getIdAsInt(avStringId);

    if (av.valueUsages) {
      _.each(av.valueUsages, function (vu, caStringId) {
        var caId = getIdAsInt(caStringId),
          vuId = vuCounter,
          upchargeVertex;

        // Use a counter instead of _.uniqueId in order
        // to get consistent outputs that allow us to test
        // comparatively.
        vuCounter += 1;

        // Add the vu vertex
        options.graph.vertices.push(_.defaults({
          id: vuId,
          ns: "vu"
        }, _.omit(vu, ["upcharge", "associatedView"])));

        // Links: ca > vu
        options.graph.edges.push({
          from: "ca:" + caId,
          to: "vu:" + vuId,
          type: "hasValueUsage"
        });

        // Links: vu > av
        options.graph.edges.push({
          from: "vu:" + vuId,
          to: "av:" + avId,
          type: "usesValue"
        });

        if (vu.associatedView) {
          linkVuViews(vuId, vu, options);
        }

        // Handle upcharges for the value usage
        if (vu.upcharge) {
          upchargeVertex = getPriceVertex(vu.upcharge, vu.pricingDescription || "", options);
          // If the up-charge only includes 0 values no vertex
          // will be included
          if (upchargeVertex) {
            options.graph.edges.push({
              from: "vu:" + vuId,
              to: "uc:" + upchargeVertex.id,
              type: "upcharges"
            });
          }
        }

      });
    }
  });
}



module.exports = function (options) {
  addValueUsageVertices(options);
  return options;
};
