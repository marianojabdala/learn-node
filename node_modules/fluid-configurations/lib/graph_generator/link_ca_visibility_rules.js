/**
 * Links cas and vrs
 */

var _ = require("lodash");

function addVerticesAndEdgesForVisibilityRules(options, ca, caIdString) {
  var getIdAsInt = options.utils.getIdAsInt,
    getUniqueObjectId = options.utils.getUniqueObjectId,
    caId = getIdAsInt(caIdString),
    vrVertex,
    ownerCaId = "ca:" + caId;


  if (ca.visibilityRules) {
    vrVertex = {
      id: getUniqueObjectId(ca.visibilityRules),
      ns: "vr"
    };

    options.graph.edges.push({
      from: ownerCaId,
      to: "vr:" + vrVertex.id,
      type: "hasVisibilityRule"
    });
  }

  _.each(ca.visibilityRules, function (rule) {

    if (rule.type === "equalAttributeValue") {

      options.graph.edges.push({
        from: "vr:" + vrVertex.id,
        to: "ca:" + getIdAsInt(rule.attributeId),
        type: "isVisibleWhenSameAttributeValue"
      });

      // TODO: Keep the info only on the edges
      vrVertex.equalAttributeValue = vrVertex.equalAttributeValue || {};
      vrVertex.equalAttributeValue[getIdAsInt(rule.attributeId)] = getIdAsInt(rule.valueId);

    } else if (rule.type === "equalFacetValue") {
      options.graph.edges.push({
        from: "vr:" + vrVertex.id,
        to: "ca:" + getIdAsInt(rule.attributeId),
        type: "isVisibleWhenSameFacetValue"
      });

      // TODO: Keep the info only on the edges
      vrVertex.equalFacetValue = vrVertex.equalFacetValue || {};
      vrVertex.equalFacetValue[getIdAsInt(rule.facetId)] = getIdAsInt(rule.facetValueId);
    }
  });

  if (vrVertex) {
    options.graph.vertices.push(vrVertex);
  }

}


function extractVisibilityRules(options) {
  function processCa(ca, id) {
    if (ca.visibilityRules) {
      addVerticesAndEdgesForVisibilityRules(options, ca, id);
    }
    // Handle subAttributes
    if (ca.subAttributes) {
      _.each(ca.subAttributes, function (ca, caId) {
        processCa(ca, caId);
      });
    }
  }
  _.each(options.config.attributes, function (ca, caId) {
    processCa(ca, caId);
  });
}

module.exports = function (options) {
  extractVisibilityRules(options);
  return options;
};
