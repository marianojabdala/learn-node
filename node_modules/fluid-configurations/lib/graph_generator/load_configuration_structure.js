var _ = require("lodash");

/**
 * This function defines a base structure for published configurations
 * we will use this when generating the graph in order to understand
 * the type of vertices that are available for a product.
 */

module.exports = function (options) {
  var getIdAsInt = options.utils.getIdAsInt,
    structure = {};

  // Product config top level property information required
  // for extracting a graph of elements and their edges
  structure = {

    // Ignored elements
    areasConfiguration: false,
    dictionary: false,
    localization: false,
    locationOverrides: false,

    // Elements that are extracted as graph vertices

    attributes: {
      options: {
        isVertex: true,
        ns: "ca",
        nsIdRegexp: /(ca)_([\d]+)$/,
        subTypes: [{
          holder: "subAttributes",
          ownerIdentifier: "parentId"
        }],
        hasManyThrough: {
          av: {
            via: "vs",
            edgeType: "hasAttributeValue",
            sortBy: "priority"
          }
        }
      },
      members: { // List of relationships from attributes
        facets: "f", // on __relationships
        values: "av", // on __relationships
        subAttributes: "ca", // done
        sympatheticFacets: "sf", // on __relationships
        sympatheticRelations: "sr", // on __relationships
        associatedView: "view", // on __relationships
        visibilityRules: "vr" // on __relationships
      }
    },


    facets: {
      options: {
        isVertex: true,
        ns: "f",
        nsIdRegexp: /^(f)([\d]+)$/,
        subTypes: [{
          holder: "facetValues",
          ownerIdentifier: "facetId",
          extractor: function (facetValue, stringifiedId) {
            return [_.defaults({
              id: getIdAsInt(stringifiedId),
              ns: "fv"
            }, facetValue)];
          }
        }]
      },
      members: {
        facetValues: "fv" // on __relationships
      }
    },


    values: {
      options: {
        isVertex: true,
        ns: "av",
        nsIdRegexp: /^(av)([\d]+)$/,
        hasMany: ["valueSets"], // includes hasMany references to
        // value sets that expand the
        // values available
      },
      members: {
        facets: "vf", // probably should just be f
        upcharge: "uc", // on __relationships
        valueUsages: "vu" // on __relationships
        // textConfig: "tc" // on __relationships
      }
    },

    views: {
      options: {
        isVertex: true,
        ns: "view",
        idField: "name"
      },
      members: {
        sprites: "spr", // Should be edges to attributes with
        // properties for coordinates and z-index
        // on __relationships
        zoomsprites: "zspr" // same as sprites but using different
        // edge name and properties
        // on __relationships
      }
    },

    valueSets: {
      options: {
        isVertex: true,
        ns: "vs",
        nsIdRegexp: /^(vs)([\d]+)$/,
        hasMany: ["values"], // includes hasMany to

        extractor: function (data, stringifiedId) {
          return [{
            id: getIdAsInt(stringifiedId),
            ns: "vs",
            __relationships: {
              values: data
            }
          }];
        }
      },
      members: {}
    },

    // used by prod/dev/1523/product/20604
    facetCategories: {
      options: {
        isVertex: true,
        ns: "fc",
        idField: "indexableName"
      },
      members: {
        metadataTemplates: "mdt"
      }
    },

    // used by prod/prod/758 and prod/prod/1479
    productFacets: {
      options: {
        isVertex: true,
        ns: "pf",
        idField: "facetName"
      },
      members: {
        facetValues: "fv" // on __relationships
      }
    },

    // Used by 1475 and 1479
    attributeGroups: {
      options: {
        isVertex: true,
        ns: "ag"
      },
      members: {
        attributes: "ca"
      }
    }
  };

  // Nested elements
  structure = _.defaults({

    subAttributes: _.defaults({
      isVertex: false
    }, _.clone(structure.attributes)),

    sympatheticFacets: _.defaults({
      isVertex: false,
      ns: "sf"
    }, _.clone(structure.facets)),

  }, structure);

  options.structure = structure;
  return options;
};
