/**
 * Links cas and avs
 */

var _ = require("lodash");

function extractCaAvEdges(options) {
  var getIdAsInt = options.utils.getIdAsInt,
    edges = [];
  function processCa(ca, id) {
    if (ca.values) {
      var from = "ca:" + getIdAsInt(id);
      _.each(ca.values, function (valueId) {
        var vsId, to;

        if (valueId.indexOf("av") === 0) {
          to = "av:" + getIdAsInt(valueId);
          edges.push({
            from: from,
            to: to,
            type: "hasAttributeValue"
          });

          // valueId's starting with av_ca_ are considered virtualAttributes
          // these are normally text attributes whose value might vary depending
          // on the configurableAttribute it belongs to.
          // TODO: Remove as soon as we don't need it in oder to compare FC2
          //       tests results for FC3
          if (valueId.indexOf("av_ca_") === 0) {
            edges.push({
              from: from,
              to: to,
              type: "hasVirtualAttributeValue"
            });
          }

        // The attribute value is a value set
        } else if (valueId.indexOf("vs") === 0) {
          vsId = getIdAsInt(valueId);
          edges.push({
            from: from,
            to: "vs:" + vsId,
            type: "groupsValue"
          });

          // get values
          _.each(options.config.valueSets[valueId], function (avId) {
            var avKey = "av:" + getIdAsInt(avId);
            edges.push({
              from: from,
              to: avKey,
              type: "hasAttributeValue"
            });
          });
        }
      });
    }

    if (ca.subAttributes) {
      _.each(ca.subAttributes, function (ca, caId) {
        processCa(ca, caId);
      });
    }
  }
  _.each(options.config.attributes, function (ca, caId) {
    processCa(ca, caId);
  });

  return edges;
}

module.exports = function (options) {
  var edges = extractCaAvEdges(options);

  if (edges.length > 0) {
    options.graph.edges = options.graph.edges.concat(edges);
  }

  return options;
};
