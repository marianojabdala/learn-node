var _ = require("lodash");

/*
* Views are linked from:
*   ag > view (handled by link_attribute_groups.js)
*   vu > view (handled by lin_value_usages.js)
*   ca > view (handled by addCaViews on this file)
*/

/**
* The default view for a product is the first one found
* on the product config views list. Although
* there is no guarantee on object sorting
* this seems to be what configure 2 has been using without
* issues.
*/
function getDefaultViewName(options) {
  return _.first(_.keys(options.config.views || []));
}

function addViewVertices(options) {
  var config = options.config,
    viewNames = _.keys(config.views || []),
    i, total,
    productVertexKey = "p:" + options.graph.vertices[0].id,
    defaultView = getDefaultViewName(options);

  for (i = 0, total = viewNames.length; total > i; i += 1) {
    // We will remove duplicates on the optimize_graph stage
    // for now lets keep things simple
    options.graph.vertices.push({
      id: viewNames[i],
      ns: "view",
      name: viewNames[i]
    });
  }

  if (defaultView) {
    options.graph.edges.push({
      from: productVertexKey,
      to: "view:" + defaultView,
      type: "displaysView"
    });
  }
}

function addCaViews(attributes, options) {
  var getIdAsInt = options.utils.getIdAsInt;

  _.each(attributes, function (ca, caIdString) {
    var view, caId;
    caId = getIdAsInt(caIdString);

    if (ca.associatedView && ca.associatedView.viewId) {
      view = ca.associatedView.viewId;
      // We will remove duplicates on the optimize_graph stage
      // for now lets keep things simple
      options.graph.vertices.push({
        id: view,
        ns: "view",
        name: view
      });

      options.graph.edges.push({
        from: "ca:" + caId,
        to: "view:" + view,
        type: "displaysView"
      });
    }

    if (ca.subAttributes) {
      addCaViews(ca.subAttributes, options);
    }

  });
}


module.exports = function (options) {
  addViewVertices(options);
  addCaViews(options.config.attributes, options);
  return options;
};

