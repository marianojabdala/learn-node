/**
 * Links cas in attribute groups
 */

var _ = require("lodash");

module.exports = function (options) {
  var config = options.config,
    getIdAsInt = options.utils.getIdAsInt,
    productVertexKey = "p:" + options.graph.vertices[0].id;


  if (config.attributeGroups) {
    _.each(config.attributeGroups, function (ag, agStringId) {
      var agId = getIdAsInt(agStringId);

      // Create ag vertex
      options.graph.vertices.push(_.defaults({
        id: agId,
        ns: "ag",
      }, _.omit(ag, "attributes", "associatedView")));

      // link p > ag
      options.graph.edges.push({
        from: productVertexKey,
        to: "ag:" + agId,
        type: "hasAttributeGroup"
      });

      // link ag > cas
      if (ag.attributes) {
        _.each(ag.attributes, function (caStringId) {
          options.graph.edges.push({
            from: "ag:" + agId,
            to: "ca:" + getIdAsInt(caStringId),
            type: "hasAttribute"
          });
        });
      }

      if (ag.associatedView) {

        // The view might only be included on the attribute group
        // so we want to make sure there is a vertex available
        options.graph.vertices.push({
          id: ag.associatedView.viewId,
          ns: "view",
          name: ag.associatedView.viewId
        });

        // So far, it looks like only viewId is
        // included under associatedView
        options.graph.edges.push({
          from: "ag:" + agId,
          to: "view:" + ag.associatedView.viewId,
          type: "displaysView"
        });

      }
    });
  }

  return options;
};
