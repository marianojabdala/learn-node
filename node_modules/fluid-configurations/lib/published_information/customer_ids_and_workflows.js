/**
 * Gets all published customer ids and workflows
 * available for a given environment
 *
 * Example:
 *
 *    getCustomerIdsAndWorkflows({environment: "prod"}, function (err, workflows) {
 *      if (err) { return console.error(err); }
 *      console.log(workflows);
 *    });
 *
 * which produces:
 *
 *    {
 *      "636": {
 *        "customerId": 636,
 *        "environment": "prod",
 *        "workflows": [
 *          "dev-model-0",
 *          "dev-model-1",
 *          "dev-model-2",
 *          "dev2",
 *          "dev",
 *          "dreamsoft",
 *          "p13n",
 *          "prod",
 *          "qa2",
 *          "qa",
 *          "test",
 *          "test2"
 *        ]
 *      }
 *    }
 */

var getCustomerIdsAndWorkflows,
  getWorkflows = require("./workflows"),
  async = require("async"),
  _ = require("lodash"),
  memoize = require("../memoizer"),
  debug = require("debug")("fluid:configurations:customer-discovery"),
  s3 = require("../s3"),
  s3_params = s3._params;

getCustomerIdsAndWorkflows = function getCustomerIdsAndWorkflows(options, callback) {
  var customers = {};

  getWorkflows(options, function (err, workflows) {
    if (err) {
      return callback(err);
    }

    // Prevent querying S3 if the customer is set explicitly
    if (_.isArray(options.customers) && options.customers.length > 0) {
      options.customers.forEach(function (id) {
        customers[id] = {
          customerId: id,
          environment: options.environment,
          workflows: workflows
        };
      });

      debug("[info] Not discovering customers on S3, using explicit customers %j", customers);
      return callback(null, customers);
    }


    async.map(workflows, function (workflow, cb) {
      var params = {
          Bucket: s3_params.Bucket,
          Delimiter: "/",
          EncodingType: "url",
          Prefix: options.environment + "/" + workflow + "/customers/"
        },

        prefixRegexp = new RegExp("^" + params.Prefix.replace(/[\/]+/g, "\\/"));

      debug("[info] Discovering customer ID's on s3://%s/%s", params.Bucket, params.Prefix);

      s3.listObjects(params, function (err, data) {
        if (err) {
          return cb(err);
        }
        _.map(data.CommonPrefixes, function (entry) {
          var id = parseInt(entry.Prefix.replace(prefixRegexp, "").replace("/", "").replace(/[^\d]+/g, ""), 10);
          if (_.isNumber(id)) {
            customers[id] = customers[id] || {
              customerId: id,
              environment: options.environment
            };
            customers[id].workflows = customers[id].workflows || [];
            customers[id].workflows.push(workflow);
          }
        });
        cb();
      });
    }, function (err) {

      if (err) {
        debug("[error] Failed discovering customers with error %s", err.message);
      } else {
        debug("[info] Discovered customers %j", customers);
      }

      callback(err, customers);
    });
  });
};

module.exports = memoize(getCustomerIdsAndWorkflows, [
  "customers", "environment", "productId", "customerId"
]);
