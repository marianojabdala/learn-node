/**
 * Gets all published workflows available for a given environment
 *
 * Example:
 *
 *    getWorkflows({environment: "prod"}, function (err, workflows) {
 *      if (err) { return console.error(err); }
 *      console.log(workflows);
 *    });
 *
 * which produces:
 *
 *    ["qa", "prod", "dev-impl"]
 */

var getWorkflows,
  memoize = require("../memoizer"),
  _ = require("lodash"),
  s3 = require("../s3"),
  debug = require("debug")("fluid:configurations:workflow-discovery"),
  s3_params = s3._params;

getWorkflows = function getWorkflows(options, callback) {

  // Prevent querying S3 if the workflow is explicit
  if (options.workflow) {
    debug("[info] Not discovering workflows on S3, using explicit workflow %s", options.workflow);
    return callback(null, [options.workflow]);
  } else if (options.workflows) {
    debug("[info] Not discovering workflows on S3, using explicit workflows %j", options.workflows);
    return callback(null, options.workflows);
  }

  var params = {
      Bucket: s3_params.Bucket,
      Delimiter: "/",
      EncodingType: "url",
      Prefix: options.environment + "/"
    },
    prefixRegexp = new RegExp("^" + options.environment + "\\/");

  debug("[info] Discovering workflows on s3://%s/%s", params.Bucket, params.Prefix);

  s3.listObjects(params, function (err, data) {
    if (err) { return callback("s3.listObjects, got error: " + err.message, []); }
    var results = [];
    _.map(data.CommonPrefixes, function (entry) {
      results.push(entry.Prefix.replace(prefixRegexp, "").replace("/", ""));
    });

    debug("[info] Found the workflows %j on s3://%s/%s", results, params.Bucket, params.Prefix);
    callback(err, results);
  });

};

module.exports = memoize(getWorkflows, ["workflow", "workflows", "environment"]);
