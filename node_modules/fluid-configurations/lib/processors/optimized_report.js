// Generates aggregated reports for optimized configurations.

// For example:

// - An index of products and the catalogs where they are included which can be used
//   for persisting recipes when no catalog is provided.
// - A list of customer issues on different configuration types for an environment.
//   This can be shown on the admin or used implementors to troubleshoot settings.

var path = require("path"),
  async = require("async"),
  glob = require("glob"),
  _ = require("lodash"),
  getJson = require("../get_json"),
  filesize = require("filesize"),
  debug = require("debug")("fluid:configurations:processor:optimized_report"),
  writeAndTouch = require("../write_and_touch"),
  getProcessedDir = require("../processed_path")({}),
  fs = require("fs");

module.exports = function (options, callback) {
  var s3Object = options.s3Object,
    local_dir = getProcessedDir(options.local_dir, s3Object),
    type = options.s3Object.type.replace("Config", ""),
    typeIdKey = type + "Id",
    elementId = parseInt(options.s3Object[typeIdKey], 10),
    optimizedSettingsJsonPath = path.normalize(local_dir + "/" + type + "/" + elementId + "/settings.json"),
    dirname = path.normalize(local_dir + (type === "customer" ? "" : "/" + type + "/" + elementId)),
    filename = path.normalize(dirname + "/report.json"),
    mtime = new Date(options.s3Object.LastModified),
    reportGenerators = {},

    getOptimizedElementIds,

    runReport = function () {
      if (!reportGenerators[type]) {
        return setImmediate(function () {
          callback();
        });
      }
      fs.stat(filename, function (err, stats) {
        if (!options.force && stats && stats.mtime && stats.mtime.toString() === mtime.toString()) {
          // debug("[info] Up to date catalog processor %s", filename);
          return setImmediate(function () {
            return callback(null, {files: [filename]});
          });
        }

        debug("[info] Generating report for %s: %j", type, _.pick(s3Object, ["workflow", "customerId", "productId", "catalogId"]));

        reportGenerators[type](function (err, json) {
          json = json || {};
          if (err) {
            debug("[info] Failed generating report for %s: %j with error: %s", type, _.pick(s3Object, ["workflow", "customerId", "productId", "catalogId"]), err.message);
            return callback(err);
          }
          json.s3SourceIndex = s3Object;
          writeAndTouch(filename, JSON.stringify(json), mtime, function (err) {
            debug("[info] Saved report for %s: %j as %s", type, _.pick(s3Object, ["workflow", "customerId", "productId", "catalogId"]), filename);
            callback(err, {files: [filename]});
          });
        });
      });
    };


  reportGenerators.product = function (callback) {
    // console.log(local_dir + "/catalog/*/settings.json");
    async.auto({
      catalogIds: function (callback) {
        glob(local_dir + "/catalog/*/settings.json", function (err, files) {
          var catalogIds = [];
          if (files.length > 0) {
            async.eachLimit(files, 5, function (file, callback) {
              getJson(file, function (err, catalog) {
                if (err) {
                  return callback();
                }
                if (catalog.products && catalog.products.indexOf(elementId)) {
                  catalogIds.push(catalog.catalogId);
                }
                callback();
              });
            }, function (err) {
              callback(err, catalogIds);
            });
          } else {
            callback();
          }
        });
      },
      issues: function (callback) {
        // @TODO Collect issues form optimized product and product touch to configure json
        callback(null, []);
      }
    }, function (err, results) {
      callback(err, results);
    });
  };





  reportGenerators.catalog = function (callback) {
    var catalogJson;

    debug("[info] Generating catalog report based on %s", optimizedSettingsJsonPath);

    async.auto({
      catalogJson: function (optionalCallback) {
        getJson(optimizedSettingsJsonPath, function (err, json) {
          if (err) {
            debug("[error] reportGenerators.catalog failed with error: %s", err.message);
            return callback(null, { files: [] });
          }
          catalogJson = json;
          optionalCallback(null, json);
        });
      },

      issues: ["catalogJson", function (callback) {
        var issues = catalogJson ? (catalogJson.issues || []) : ["Optimized catalog settings not found"];
        callback(null, issues);
      }],

      sources: ["catalogJson", function (callback) {
        var totalSize = 0;

        if (catalogJson && catalogJson.sourceConfigurations) {
          async.mapLimit(catalogJson.sourceConfigurations, 1, function (path, callback) {
            fs.stat(options.local_dir + path, function (err, stats) {
              var file_info = {
                path: path,
                size: 0
              };

              if (!err) {
                file_info = _.defaults(_.pick(stats, "size", "mtime"), file_info);
                totalSize += file_info.size;
              } else {
                file_info.error = "File not found";
              }

              setImmediate(function () {
                callback(null, file_info);
              });
            });
          }, function (err, results) {
            callback(err, {
              totalFiles: results.length,
              totalSize: totalSize,
              humanSize: filesize(totalSize, {base: 2}),
              files: results
            });
          });
        } else {
          callback(null, {});
        }

      }]
    }, function (err, report) {
      callback(err, _.omit(report, ["catalogJson"]));
    });
  };


  reportGenerators.customer = function (callback) {
    async.auto({
      issues: function (callback) {
        callback(null, []);
      },
      products: function (callback) {
        getOptimizedElementIds("product", callback);
      },
      catalogs: function (callback) {
        getOptimizedElementIds("catalog", callback);
      }
    }, function (err, results) {
      callback(err, results);
    });
  };



  getOptimizedElementIds = function (type, callback) {
    glob(local_dir + "/" + type + "/*/settings.json", function (err, files) {
      var elemenIds = [];
      if (files.length > 0) {
        _.each(files, function (file) {
          elemenIds.push(parseInt(file.match(/\/(\d+)\/settings\.json/)[1], 10));
        });
      }
      callback(err, elemenIds);
    });
  };




  runReport();

};

