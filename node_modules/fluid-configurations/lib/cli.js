/**
 * # [Fluid Configurations](http://bitbucket.org/fluidretail/fluid-configurations)
 *
 * Command line interface for interacting with published
 * configurations
 *
 * Copyright (c) 2014 Fluid Inc, All rights reserved.
 */

/**
 * Fluid Configurations
 * Fluid Configuration Management CLI tools
 */
var runProgram,
  availableOptions = [
    "catalogs",
    "products",
    "customers",
    "environment",
    "local_dir",
    "workflow",
    "index_file",
    "cache",
    "processors",
    "force",
    "s3_bucket",
    "s3_prefix",
    "exclude"
  ],
  appCommands = ["index", "download", "process", "upload", "sync"],
  getOptions,
  setCommonOptions,
  setProcessedOptions,
  getList,
  getIds,
  getInt,
  shasum,
  crypto = require("crypto"),
  fs = require("fs"),
  path = require("path"),
  _ = require("lodash"),
  packageJson = require("../package.json"),
  processorsConfig = require("../config/processors.json"),
  allProcessors = processorsConfig.default
    .concat(processorsConfig.post_processors),
  version = packageJson.version;

runProgram = function () {
  var program = require("commander");

  program
    .usage("[" + appCommands.join(",") + ",help] [options]")
    .version(version);



  // fluid-configurations index
  setCommonOptions(program
    .command("index")
    .description("Retrieves an index of published configurations")
    .action(function () {
      getOptions(program, "index", function (err, options) {
        var fluidConfigurations = require("./fluid_configurations");

        fluidConfigurations.getPublishedIndexes(options, function (err, indexes) {
          if (err) {
            console.error(err.message);
            process.exit(1);
          }
          console.log(JSON.stringify(indexes));
        });
      });
    }),
    "index");




  // fluid-configurations download
  setCommonOptions(program
    .command("download")
    .description("Downloads published configurations")
    .action(function () {
      getOptions(program, "download", function (err, options) {
        var fluidConfigurations = require("./fluid_configurations");

        fluidConfigurations.downloadConfigurations(options, function (err, downloaded, up_to_date) {
          if (err) {
            console.error(err.message);
            process.exit(1);
          }
          console.log("%j", {
            downloaded: downloaded,
            up_to_date: _.map(up_to_date, function (s3Object) {
              return path.normalize(options.local_dir + "/admin-published/" + s3Object.Key);
            })
          });
        });
      });
    }),
    "download");




  // fluid-configurations process
  setProcessedOptions(program
    .command("process")
    .description("Process published configurations and save them locally")
    .action(function () {
      getOptions(program, "process", function (err, options) {
        var fluidConfigurations = require("./fluid_configurations");
        fluidConfigurations.processConfigurations(options, function (err, processed) {
          if (err) {
            console.error(err.message);
            process.exit(1);
          }
          console.log("%j", processed);
        });
      });
    }),
    "process");



  // fluid-configurations upload
  setProcessedOptions(program
    .command("upload")
    .description("Uploads processed configuration files to S3")
    .option("--s3_bucket [bucket]", "S3 bucket [bucket]", "fluid-configurations")
    .option("--s3_prefix [prefix]", "S3 prefix [prefix]", "dry-run/")
    .action(function () {
      getOptions(program, "upload", function (err, options) {
        var fluidConfigurations = require("./fluid_configurations");
        fluidConfigurations.uploadToS3(options, function (err, uploaded, up_to_date) {
          if (err) {
            console.error(err.message);
            process.exit(1);
          }
          console.log("%j", {
            uploaded: uploaded,
            up_to_date: up_to_date
          });
        });
      });
    }),
    "upload");



  // fluid-configurations sync
  setProcessedOptions(program
    .command("sync")
    .description("Syncs, optimizes and uploads published files")
    .option("--s3_bucket [bucket]", "S3 bucket [bucket]", "fluid-configurations")
    .option("--s3_prefix [prefix]", "S3 prefix [prefix]", "dry-run/")
    .action(function () {
      getOptions(program, "upload", function (err, options) {
        var fluidConfigurations = require("./fluid_configurations");
        fluidConfigurations.uploadToS3(options, function (err, uploaded, up_to_date) {
          if (err) {
            console.error(err.message);
            process.exit(1);
          }
          console.log("%j", {
            uploaded: uploaded,
            up_to_date: up_to_date
          });
        });
      });
    }),
    "sync");



  program
    .command("help")
    .description("Shows help for the commands: " + appCommands.join(", "))
    .action(function () {
      var command = program.args[0];
      if (appCommands.indexOf(command) !== -1) {
        console.log("" + fs.readFileSync(path.normalize(__dirname + "/../docs/cli/" + command + ".md")));
      } else {
        program.help();
      }
    });



  program.parse(process.argv);

  if (program.args.length === 0) {
    program.help();
  }

};



getOptions = function (program, type, callback) {
  var all_options = (program.args && program.args[0]) || {},
    options = _.pick(all_options, availableOptions);

  if (_.size(all_options) === 0) {
    program.help();
  }

  if (all_options.verbose) {
    process.env.DEBUG = "fluid*";
  }


  // --processors all includes everything on
  // config/processors.json
  if (options.processors &&
      options.processors.length === 1 &&
      options.processors[0] === "all") {
    options.processors = allProcessors;
  }

  // fluidConfigurations Public API defaults
  _.defaults(options, {
    environment: "prod",
    s3: {
      bucket: options.s3_bucket,
      prefix: options.s3_prefix
    },
    validateProductImagesOnS3: true
  });

  // Resolves the path for the local dir
  options.local_dir = path.resolve(options.local_dir);

  // CLI only defaults
  _.defaults(options, {
    index_file: path.normalize(options.local_dir + "/.indexes/" + shasum(JSON.stringify(_.pick(options, ["environment", "workflow", "customers", "catalogs", "products"]))) + ".json")
  });

  if (all_options.processed_version) {
    process.env.PROCESSED_VERSION = all_options.processed_version;
  }

  if (all_options.skip_versioning) {
    process.env.SKIP_PROCESSED_VERSION_PATHS = true;
  }

  if (all_options.verbose) {
    console.log("Running `fluid-configurations " + type + "` with options: %j", options);
  }

  callback(null, options, all_options);
};



setCommonOptions = function (program, type) {
  program.option("-c, --customers [int]", "List of customer ID's [444]", getIds)
  .option("--catalogs [ids]", "List of catalog ID's [5,6,7]", getIds)
  .option("--products [ids]", "List of product ID's [5,6,7]", getIds)
  .option("-w, --workflow <string>", "Workflow where the configuration was published")
  .option("-e, --environment <string>", "Environment where the configuration was published", "prod")
  .option("-d, --local_dir [string]", "Local directory where the index will be saved [`cwd`]", process.cwd())
  .option("--index_file [string]", "Name for the index file [local_dir/{options-hash}_idx.json]")
  .option("--cache <n>", "Cache the index file during n time (1 minute, 2h, 1d, 8600) [0]", 0)
  .option("-v, --verbose", "Verbose/debug mode")
  .on("--help", function () {
    var docs_path = path.normalize(__dirname + "/../docs/cli" + (type ? "/" + type : "") + ".md");
    console.log("" + fs.readFileSync(docs_path));
  });

  return program;
};


setProcessedOptions = function (program, type) {
  return setCommonOptions(program, type)
    .option("-p, --processors [list]", "List of processors [json]", getList, ["all"])
    .option("--processed_version [semver]", "Semantic version where processed files will be stored [" + version + "]", version)
    .option("--skip_versioning", "Prevents using versioning for processed files")
    .option("-e, --exclude [list]", "File types to exclude from the index [json]", getList, [])
    .option("-f, --force", "Forces executing the processor and the upload, even if when source files have not been updated");
};


getIds = function (val) {
  if (!val) { return null; }
  var list = val.split(",").map(function (val) {
    return parseInt(val.replace(/[^\d]+/g, ""), 10);
  });
  return list;
};

getInt = function (val) {
  if (!val) { return null; }
  return parseInt(val, 10);
};

getList = function (val) {
  if (!val) { return null; }
  return val.split(",");
};

shasum = function (input) {
  return crypto
    .createHash("sha1")
    .update(input)
    .digest("hex");
};

// Exports the cli for other modules to extend it.
module.exports = runProgram;
