{
  "name": "fluid-configurations",
  "version": "2.4.1",
  "description": "Downloads, migrates, validates and processes published configuration files",
  "author": {
    "name": "Fluid, Inc. Bermi Ferrer",
    "email": "bferrer@fluid.com"
  },
  "keywords": [
    "fluid",
    "configurations",
    "fluidretail",
    "node"
  ],
  "licenses": [
    {
      "type": "Fluid Inc, All Rights reserved",
      "url": "http://www.fluidretail.com/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://bitbucket.org/fluidretail/fluid-configurations.git"
  },
  "main": "lib/fluid_configurations.js",
  "bin": {
    "fluid-configurations": "./bin/fluid-configurations"
  },
  "man": [
    "./man/fluid-configurations.1"
  ],
  "directories": {
    "man": "./man",
    "lib": "./lib",
    "bin": "./bin"
  },
  "private": true,
  "devDependencies": {
    "blanket": "1.1.6",
    "configuration-engine": "git+ssh://git@bitbucket.org/fluidretail/configuration-engine.git",
    "expect.js": "0.3.1",
    "fluid-build-tools": "git+ssh://git@bitbucket.org/fluidretail/fluid-build-tools.git",
    "grunt-cli": "0.1.13",
    "grunt-contrib-jshint": "0.10.0",
    "grunt-contrib-watch": "0.6.1",
    "grunt-exec": "0.4.5",
    "grunt-markedman": "1.0.0",
    "grunt-notify": "0.3.0",
    "grunt-open": "0.2.3",
    "grunt-release": "0.7.0",
    "load-grunt-tasks": "0.4.0",
    "mocha": "1.20.0",
    "mocha-spec-cov": "0.0.3",
    "morph": "0.2.0",
    "nixt": "0.3.0",
    "time-grunt": "0.3.1"
  },
  "scripts": {
    "test": "make ci"
  },
  "dependencies": {
    "aws-sdk": "2.0.6",
    "debug": "0.8.1",
    "async": "0.9.0",
    "lodash": "2.4.1",
    "mkdirp": "0.5.0",
    "http-get": "0.5.10",
    "colors": "0.6.2",
    "jsonp-client": "0.3.3",
    "glob": "4.0.0",
    "filesize": "2.0.3",
    "amanda": "0.4.8",
    "mime": "1.2.11",
    "tmp": "0.0.23",
    "date.js": "0.2.0",
    "commander": "2.2.0"
  },
  "config": {
    "blanket": {
      "data-cover-only": "['lib', 'config']",
      "data-cover-never": "//.*/fluid-configurations/.*node_modules/.*|.*/fluid-configurations/.*test/.*/g",
      "data-cover-flags": {
        "branchTracking": true,
        "debug": false
      }
    }
  },
  "readme": "# Fluid Configurations\n\nDownloads, migrates, validates and processes published configuration files\n\n![Fluid CI Build Status](http://hubot.fluidretail.net/badge/fluid-configurations/build.png) ![Fluid CI Code Coverage](http://hubot.fluidretail.net/badge/fluid-configurations/coverage.png) ![Fluid CI Dependencies](http://hubot.fluidretail.net/badge/fluid-configurations/dependencies.png)\n\n\nThe `fluid-configurations` module allows you\nto download configurations published by the admin, analyze them\nand generate new configuration types that can be used\nby internal tools in order to access configuration data\nin a more efficient way.\n\nBy default configurations are published on the fluid-configurations\ns3 bucket and distributed via the CDN endpoint\ndlotr6nyt8a8f.cloudfront.net for browser usage.\n\n## Getting started\n\n### Requisites\n\n- AWS credentials [properly set in your system](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html#Setting_AWS_Credentials).\n- [Node.js](http://nodejs.org/)\n- A Bitbucket account with properly setup ssh credentials for checking out fluidretail's code.\n\n\n### Installation CLI\n\n    npm install git+ssh://git@bitbucket.org/fluidretail/fluid-configurations.git -g\n\nDepending on how you've setup Node.js you might need to run npm\nwith administrator rights.\n\n## Usage\n\n    $ fluid-configurations --help\n\n    Usage: fluid-configurations [index,download,process,upload,sync,help] [options]\n\n    Commands:\n\n      index [options]        Retrieves an index of published configurations\n      download [options]     Downloads published configurations\n      process [options]      Process published configurations and save them locally\n      upload [options]       Uploads processed configuration files to S3\n      sync [options]         Syncs, optimizes and uploads published files\n      help                   Shows help for the commands: index, download, process, upload, sync\n\n    Options:\n\n      -h, --help     output usage information\n      -V, --version  output the version number\n\n\n### Commands documentation\n\nYou can get help for each command by running\n\n    fluid-configurations help command-name\n\nThe following commands are available:\n\n- [index](https://bitbucket.org/fluidretail/fluid-configurations/src/master/docs/cli/index.md)\n- [download](https://bitbucket.org/fluidretail/fluid-configurations/src/master/docs/cli/download.md)\n- [process](https://bitbucket.org/fluidretail/fluid-configurations/src/master/docs/cli/process.md)\n- [upload](https://bitbucket.org/fluidretail/fluid-configurations/src/master/docs/cli/upload.md)\n- [sync](https://bitbucket.org/fluidretail/fluid-configurations/src/master/docs/cli/sync.md)\n\n\n## Installation Node.js\n\n    npm install git+ssh://git@bitbucket.org/fluidretail/fluid-configurations.git --save\n\n## Usage Node.js\n\nInclude the library on Node.js\n\n```javascript\nvar fluidConfigurations = require(\"fluid-configurations\"),\n  options = {\n    environment: \"prod\",\n    customer: 1443\n  };\n\n// Gets a full index for all the configuration assets published on S3\nfluidConfigurations.getPublishedIndexes(options, function (err, indexes) {\n\n  // Downloads all the configuration files included on the indexes\n  fluidConfigurations.downloadConfigurations({\n    indexes: indexes,\n    local_dir: path.normalize(\"./data\")\n  }, function (err) {\n\n    // Runs a list of processors on downloaded configurations\n    fluidConfigurations.processConfigurations({\n      indexes: indexes,\n      local_dir: path.normalize(\"./data\"),\n      // optional list of processors, by default\n      // all the processors on config/processors.json will be\n      // included. The json processor will be always included.\n      processors: [\"json\", \"catalog\",\n        \"optimized_report\", \"product\",\n        \"relationships\", \"preferences\"]\n    }, function (err) {\n\n      // Uploads processed files to S3\n      fluidConfigurations.uploadToS3({\n        indexes: indexes,\n        local_dir: path.normalize(\"./data\"),\n        s3: {\n          bucket: \"fluid-sandbox\",\n          prefix: \"bermi/configurations/\"\n        }\n      }, function (err) {\n\n          // All done\n      });\n\n    });\n\n  });\n\n});\n```\n\n## Module overview\n\nThis module downloads published configurations and analyzes them in order\nto build custom configurations that can be used in specialized environments.\n\nThe following description has been copied from the story DEV-2567 as this README.md file might outlive Jira.\n\nThe admin publishes configure configuration files to s3://fluid-configure-published.\n\nConfiguration files are only updated when customers publish their products and catalogs into workflows. This creates a situation where our runtime and server side code that uses those configurations has to keep backwards compatibility with old and sometime erroneous configurations that cant be updated because our customers might have an unpublishable state on their admin data.\n\nThis module creates a local snapshot of all the configurations and transverse them to generate new configuration types without requiring re-publishes.\n\n### Benefits and features\n\n#### Generation of JSON configurations\n\nWe can now use CORS on our s3 buckets in order to serve JSON files instead of JSONp.\n\nThe main benefit is the avoidance of callback naming conventions (our callbacks are static) that have been the source of some bugs in the past.\n\nAnother benefit is that we simplify server side access to configuration files by removing a parse/replace and evaluation step.\n\nOn the runtime this will also get rid of the fatal error that occurs when we try to access a non existent jsonp file, if the file has a js syntax error or if there are jsonp callback clashes like the ones we had in the past.\n\n### Validation, data integrity checks and migrations\n\nPost processing steps can identify issues that where not initially validated on the admin and can help us to create migrations for configurations on a post processing step rather than at the implementation level.\n\nThis module makes use of the JSONschema standard for describing newly\ngenerated configuration files. This will give us a good deal of confidence on the integrity of the publishes.\n\nAn array with know \"issues\" should be attached to newly generated configuration files.\n\n### Generation of optimized configurations.\n\nFor example, the catalog needs information about products included on the catalog, the catalog and customer configuration, the Cloud Search index configuration and all the locales.\n\nFor some customer like Reebok this sums up to 800 files and 200MB worth of configurations (and growing), therefore we need to generate a unified configuration that allows us to build a catalog context on our servers and on the runtime js in order to offer decent performance.\n\n\n#### Mobile optimized configurations\n\nThe upcoming DEV-2302 requires us to optimize configure for mobile devices. One way is to merge common configuration files (localization, product, customer....) for a given context (product, catalog...) into a single smaller config.\n\n\n### Removing localization logic from server and client processing logic\n\nRight now we are loading multiple localization configuration files (customer, product, catalog, templates) and we are merging and creating a dictionary in memory.\n\nWe can greatly simplify our code if we serve localized configuration files that do all the merging during the post publish process. As a side effect will also improve performance and bugs.\n\n#### Testability, support and development improvements\n\nHaving the ability to create snapshot of configurations makes it simpler for developers to analyze, test, validate and use the configurations in ways that where not possible so far.\n\nFor example we can quickly and progamatically verify who is using a given setting by doing a search on the configuration files. This can help us understand better who or what needs to be tested when we make changes on our code.\n\nIt also allows us to generate test cases and feed the inspector list of implementations and products automatically.\n\n\n\n\n## Environment variables\n\nThe default behavior of the library can be customized via the following\nenvironment variables:\n\n- FLUID_SKIP_S3_LIST_MEMOIZATION: When defined the application will\n  not cache the requests made to S3. This will result in slower\n  performance but might be required if you are running the module\n  on a long lived runtime or during testing.\n- FLUID_S3_INDEXER_CONCURRENCY: How many concurrent S3 API clients\n  do we want to use? The default is to use 5 clients in parallel.\n- SKIP_PROCESSED_VERSION_PATHS: By default processed files will\n  be prefixed by the semver of this package.\n  This allow us to generate different version of the configuration\n  files between releases adapting them to the need of the consumer\n  applications.\n\n## Testing\n\n```bash\nmake\n```\n\n### Continuous linting and testing\n\n```bash\nmake dev\n```\n\n## Releasing new versions\n\n```bash\nmake release\n```\n\nThe tasks release (same as release-patch), release-minor and release-major should be\nused for pushing new versions of the code.\n\n## License\n\nCopyright (c) 2014 Fluid Inc, All rights reserved.",
  "readmeFilename": "README.md",
  "_id": "fluid-configurations@2.4.1",
  "_shasum": "878b945ed82234c2585508fe7de1f22c9dfeb936",
  "_resolved": "git+ssh://git@bitbucket.org/fluidretail/fluid-configurations.git#f7c365e8afab1a3d19982003059aa023b874db77",
  "_from": "git+ssh://git@bitbucket.org/fluidretail/fluid-configurations.git"
}
