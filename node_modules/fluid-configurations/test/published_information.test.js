var expect = require("expect.js"),
  _ = require("lodash"),
  // Tests each information set under lib/published_information/
  published_information = [
    "workflows",
    "customer_ids_and_workflows",
    "customer_workflows",
    "customer_catalogs",
    "customer_products",
    "product_workflows"
  ];

// published_information = ["product_workflows"];

describe("Fluid S3 Published Information", function () {

  published_information.forEach(function (name) {

    it("should get information about published " + name, function (done) {
      this.timeout(100 * 1000);

      var getInfo = require("../lib/published_information/" + name + ".js"),
        fixture = require("./fixtures/" + name + ".json");
      getInfo(fixture.params, function (err, information) {
        var fixtureHits = [];
        if (err) { throw err; }
        // console.log(JSON.stringify(information, null, 2));
        if (_.isArray(fixture.result)) {
          fixture.result.map(function (result) {
            expect(information).to.contain(result);
          });
        } else {
          _.each(information, function (hit, key) {
            var latestEntry = information[key],
              fixtureEntry = fixture.result[key];
            if (fixtureEntry) {
              fixtureHits.push(hit);
              _.each(fixture.expectations.same || [], function (key) {
                if (!latestEntry[key]) {
                  throw new Error("Missing " + key + " on " + name + " " + JSON.stringify(latestEntry));
                }
                expect(latestEntry[key]).to.be(fixtureEntry[key]);
              });
              if (fixture.expectations.has) {
                _.each(fixture.expectations.has, function (key) {
                  expect(latestEntry[key]).to.be.ok();
                });
              }
            }
          });
        }
        // Have we tested a large enough set?
        if (fixture.minimumEntries) {
          expect(fixtureHits.length).to.be.above(fixture.minimumEntries - 1);
        }

        done();
      });
    });
  });

});
