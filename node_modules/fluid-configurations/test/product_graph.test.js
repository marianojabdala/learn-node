var expect = require("expect.js"),
  _ = require("lodash"),
  exec = require("child_process").exec,
  path = require("path"),
  getJson = require("../lib/get_json"),
  local_dir = path.resolve(__dirname + "/../tmp/test-data"),
  fluidConfigurations = require("../");

describe("Product graph generator", function () {


  var params = {
      customer: 1496, // UGG
      workflow: "prod",
      environment: "prod",
      products: 20391
    },
    processedFiles,
    configPath,
    configData;


  // params = {
  //   customer: 1479,
  //   workflow: "prod",
  //   environment: "prod",
  //   products: 20580
  // };

  params = {
    customer: 1475,
    workflow: "prod",
    environment: "prod",
    products: 20670,
    exclude: ["catalog"]
  };

  params = {
    customer: 1484,
    workflow: "prod",
    environment: "prod",
    products: 20213,
    exclude: ["catalog"] // uses equalFacetValue
  };

  // params = {
  //   customer: 1523,
  //   workflow: "dev",
  //   environment: "prod",
  //   products: 20604
  // };

  // params = {
  //   customer: 758,
  //   workflow: "prod",
  //   environment: "prod",
  //   products: 20333
  // };


  // params = {
  //   customer: 1443,
  //   workflow: "prod",
  //   environment: "prod",
  //   products: 20104
  // };

  after(function (done) {
    done();
    // exec("rm -rf " + local_dir, done);
  });

  before(function (done) {
    this.timeout(1000 * 100000);

    exec("rm -rf " + local_dir, function () {

      var options = _.defaults({}, params, {
        local_dir: local_dir,
        processors: ["product"]
      });

      fluidConfigurations.processConfigurations(options, function (err, results) {
        if (err) { throw err; }
        processedFiles = results.product.files;
        expect(processedFiles).to.be.ok();
        done();
      });
    });
  });

  it("should include processed paths", function () {
    // expect(processedFiles.length).to.be.above(5);
    console.log(processedFiles);
    configPath = _.find(processedFiles, function (file) {
      return file.indexOf("graph-settings") !== -1;
    });
    expect(configPath).to.be.ok();
  });

  it("should save localized files", function (done) {
    getJson(configPath, function (err, data) {
      if (err) { throw err; }
      configData = data;
      // console.log(JSON.stringify(configData, null, 2));
      done();
    });
  });

  it("should include graph vertices", function () {
    // console.log(configData.graph);
    // console.log(configData.graph.vertices, configData.graph.vertices.length);
    //  expect(configData.graph.vertices).to.be.an(Array);
  });

  it("should include graph edges", function () {
    // expect(configData.graph.edges).to.be.an(Array);
  });

});

