var expect = require("expect.js"),
  _ = require("lodash"),
  exec = require("child_process").exec,
  path = require("path"),
  getJson = require("../lib/get_json"),
  local_dir = path.resolve(__dirname + "/../tmp/test-data"),
  fluidConfigurations = require("../");

describe("Product processor", function () {
  var paramsUgg = {
      customer: 1496,
      workflow: "prod",
      environment: "prod"
    },
    processedFiles,
    enUsPath,
    enUsConfig,
    vnVnPath,
    vnVnConfig;

  after(function (done) {
    exec("rm -rf " + local_dir, done);
  });

  before(function (done) {
    this.timeout(1000 * 30);

    var options = _.defaults({}, paramsUgg, {
      local_dir: local_dir,
      processors: ["product"]
    });

    fluidConfigurations.processConfigurations(options, function (err, results) {
      if (err) { throw err; }
      processedFiles = results.product.files;
      done();
    });
  });

  it("should include processed paths", function () {
    expect(processedFiles.length).to.be.above(5);
    enUsPath = _.find(processedFiles, function (file) {
      return file.indexOf("en_us.json") !== -1;
    });
    expect(enUsPath).to.be.ok();
    vnVnPath = _.find(processedFiles, function (file) {
      return file.indexOf("vn_vn.json") !== -1;
    });
    expect(vnVnPath).to.be.ok();
  });

  it("should save localized enUs files", function (done) {
    getJson(enUsPath, function (err, data) {
      if (err) { throw err; }
      enUsConfig = data;
      done();
    });
  });

  it("should save localized enUs files", function (done) {
    getJson(vnVnPath, function (err, data) {
      if (err) { throw err; }
      vnVnConfig = data;
      done();
    });
  });

  it("should include locale details", function () {
    expect(enUsConfig.locale).to.be("en_us");
    expect(enUsConfig.locales).to.contain("en_us", "vn_vn");
    expect(enUsConfig.defaultLocale).to.be("en_us");

    expect(vnVnConfig.locale).to.be("vn_vn");
    expect(vnVnConfig.locales).to.contain("en_us", "vn_vn");
    expect(vnVnConfig.defaultLocale).to.be("en_us");
  });

  it("should translate multilingual strings", function () {
    expect(enUsConfig.name).to.be("Classic Short Boot");
    expect(enUsConfig.attributes.p_20391_ca_27608.name).to.be("Available Sizes");
  });

  it("should cast stringified booleans", function () {
    expect(enUsConfig.indexable === true).to.be.ok();
    expect(enUsConfig.attributes.p_20391_ca_27608.indexable === false).to.be.ok();
  });

  it("should cast stringified numbers", function () {
    expect(enUsConfig.priceConfiguration.basePrice.us === 220).to.be.ok();
  });

});

